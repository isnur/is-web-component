/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';


export namespace Components {
  interface IsBadge {
    /**
    * The color options are: `"primary"`, `"secondary"`, `"success"`, `"warning"`, `"error"`, `"light"`, `"info"`, `"white"`, `"black"`, and `"dark"`.
    */
    'color'?: string;
    /**
    * If `true`, make the badge rounded.
    */
    'rounded'?: boolean;
    /**
    * The text to display in the badge.
    */
    'text': string;
  }
  interface IsMultiselect {
    /**
    * If `true`, the user cannot interact with the select.
    */
    'disabled': boolean;
    /**
    * Get the selected items.
    */
    'getSelected': () => Promise<ISelectItem[]>;
    /**
    * The options list items.
    */
    'items': ISelectItem[];
    /**
    * The label when option is selected.
    */
    'labelSelected': string;
    /**
    * The label to remove or select.
    */
    'labelTo': ILabelTo;
    /**
    * Limit the display of selected options. The rest will be hidden within the limitText string.
    */
    'limit': number;
    /**
    * Function that process the message shown when selected elements pass the defined limit.
    */
    'limitText': Function;
    /**
    * The text to display when not selected items.
    */
    'placeholder': string;
    /**
    * The selected items.
    */
    'selected': ISelectItem[];
    /**
    * If `true`, The badges will show selected items.
    */
    'showSelectedBadge': boolean;
  }
}

declare global {


  interface HTMLIsBadgeElement extends Components.IsBadge, HTMLStencilElement {}
  var HTMLIsBadgeElement: {
    prototype: HTMLIsBadgeElement;
    new (): HTMLIsBadgeElement;
  };

  interface HTMLIsMultiselectElement extends Components.IsMultiselect, HTMLStencilElement {}
  var HTMLIsMultiselectElement: {
    prototype: HTMLIsMultiselectElement;
    new (): HTMLIsMultiselectElement;
  };
  interface HTMLElementTagNameMap {
    'is-badge': HTMLIsBadgeElement;
    'is-multiselect': HTMLIsMultiselectElement;
  }
}

declare namespace LocalJSX {
  interface IsBadge {
    /**
    * The color options are: `"primary"`, `"secondary"`, `"success"`, `"warning"`, `"error"`, `"light"`, `"info"`, `"white"`, `"black"`, and `"dark"`.
    */
    'color'?: string;
    /**
    * If `true`, make the badge rounded.
    */
    'rounded'?: boolean;
    /**
    * The text to display in the badge.
    */
    'text'?: string;
  }
  interface IsMultiselect {
    /**
    * If `true`, the user cannot interact with the select.
    */
    'disabled'?: boolean;
    /**
    * The options list items.
    */
    'items'?: ISelectItem[];
    /**
    * The label when option is selected.
    */
    'labelSelected'?: string;
    /**
    * The label to remove or select.
    */
    'labelTo'?: ILabelTo;
    /**
    * Limit the display of selected options. The rest will be hidden within the limitText string.
    */
    'limit'?: number;
    /**
    * Function that process the message shown when selected elements pass the defined limit.
    */
    'limitText'?: Function;
    /**
    * Emitted when the selected items has changed.
    */
    'onOnSelected'?: (event: CustomEvent<any>) => void;
    /**
    * The text to display when not selected items.
    */
    'placeholder'?: string;
    /**
    * The selected items.
    */
    'selected'?: ISelectItem[];
    /**
    * If `true`, The badges will show selected items.
    */
    'showSelectedBadge'?: boolean;
  }

  interface IntrinsicElements {
    'is-badge': IsBadge;
    'is-multiselect': IsMultiselect;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      'is-badge': LocalJSX.IsBadge & JSXBase.HTMLAttributes<HTMLIsBadgeElement>;
      'is-multiselect': LocalJSX.IsMultiselect & JSXBase.HTMLAttributes<HTMLIsMultiselectElement>;
    }
  }
}


