/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Color, Ratio } from "./interfaces";
import { IToggleOptions } from "./components/readmore/readmore.interface";
export namespace Components {
    interface IsAlert {
        /**
          * If `true` alert will close automatically.
         */
        "autoClose": boolean;
        /**
          * Number of seconds to close alert automatically if autoClose `true`.
         */
        "closeSecs": number;
        /**
          * Customized close button text.
         */
        "closeText"?: string;
        /**
          * If closable or not.
         */
        "closeable": boolean;
        /**
          * The color options are: `"primary"`, `"secondary"`, `"success"`, `"warning"`, `"error"`, `"light"`, `"info"`, `"white"`, `"black"`, and `"dark"`.
         */
        "color"?: string;
        /**
          * If `true`, make the alert rounded.
         */
        "rounded"?: boolean;
    }
    interface IsBadge {
        /**
          * The color options are: `"primary"`, `"secondary"`, `"success"`, `"warning"`, `"error"`, `"light"`, `"info"`, `"white"`, `"black"`, and `"dark"`.
         */
        "color"?: string;
        /**
          * If `true`, make the badge rounded.
         */
        "rounded"?: boolean;
        /**
          * The text to display in the badge.
         */
        "text": string;
    }
    interface IsBreadcrumb {
        "align"?: 'left' | 'right' | 'center';
        /**
          * Use different separator for each item default is '/'
         */
        "separator"?: 'dot' | 'arrow' | 'slash';
        /**
          * Size of the breadcrumb, default set normal
         */
        "size"?: 'small' | 'medium' | 'large';
    }
    interface IsBreadcrumbItem {
        /**
          * Active the condition active of item, basically used by latest item in breadcrumb component
         */
        "active": boolean;
        /**
          * Contains a URL If prop is set, an anchor tag will be rendered
         */
        "href": string | undefined;
        /**
          * Where to display linked url apply when `href` props provided clue: `_blank, _self`
         */
        "target": string | undefined;
    }
    interface IsButton {
        /**
          * The color to use, default is `default`
         */
        "color": Color;
        /**
          * If `true`, then user cannot interact with the button and changed color
         */
        "disabled": boolean;
        /**
          * Display of the button
         */
        "display"?: 'fullwidth';
        /**
          * Contains a URL If prop is set, an anchor tag will be rendered
         */
        "href": string | undefined;
        /**
          * Shape of the button
         */
        "shape"?: 'round';
        /**
          * Size of the button, default set normal
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * Where to display linked url apply when `href` props provided clue: `_blank, _self`
         */
        "target": string | undefined;
        /**
          * Type of the button
         */
        "type": 'submit' | 'reset' | 'button';
    }
    interface IsCard {
        /**
          * change color background
         */
        "color"?: Color;
        /**
          * when set as `true`, than card cannot be interacted.
         */
        "disabled": boolean;
        /**
          * href be filled make card become hover
         */
        "href"?: string;
        /**
          * target `_blank', '_self', etc
         */
        "target": string;
    }
    interface IsCardBody {
    }
    interface IsCardHeader {
    }
    interface IsCardImage {
        "alt"?: string;
        /**
          * object-fit
         */
        "object"?: 'cover' | 'fill' | 'contain' | 'scale-down' | 'none';
        "ratio"?: Ratio;
        "src": string;
    }
    interface IsCardTitle {
    }
    interface IsContainer {
        /**
          * When set to true, makes the row 100% wide all the time
         */
        "fluid"?: boolean | string;
        /**
          * Specify the HTML tag to render instead of the default tag
         */
        "tag"?: string;
    }
    interface IsDivider {
        /**
          * The align text of divider
         */
        "alignText": 'right' | 'left' | 'center';
        /**
          * The decoration to change color of divider
         */
        "color": Color;
        /**
          * The text to shown at the divider
         */
        "text": string;
    }
    interface IsModal {
        /**
          * The text to display in the cancel button.
         */
        "cancelText": string;
        /**
          * If 'true' will show the modal header.
         */
        "modalHeader": boolean;
        /**
          * The title to display in the modal.
         */
        "modalTitle": string;
        /**
          * The text to display in the save button.
         */
        "saveText": string;
        /**
          * If 'true' will make the modal visible.
         */
        "visible": boolean;
    }
    interface IsMultiselect {
        /**
          * Enable/disable closing after selecting an option
         */
        "closeOnSelect": boolean;
        /**
          * If `true`, the user cannot interact with the select.
         */
        "disabled": boolean;
        /**
          * Get the selected items.
         */
        "getSelected": () => Promise<ISelectItem[] | undefined>;
        /**
          * The options list items.
         */
        "items": ISelectItem[];
        /**
          * The label when option is selected.
         */
        "labelSelected": string;
        /**
          * The label to remove or select.
         */
        "labelTo": ILabelTo;
        /**
          * Limit the display of selected options. The rest will be hidden within the limitText string.
         */
        "limit": number;
        /**
          * Function that process the message shown when selected elements pass the defined limit.
         */
        "limitText": Function;
        /**
          * Maximum selected items can be selected.
         */
        "max": number;
        /**
          * The text to display when not selected items.
         */
        "placeholder": string;
        /**
          * The selected items.
         */
        "selected": ISelectItem[];
        /**
          * If `true`, The badges will show selected items.
         */
        "showSelectedBadge": boolean;
    }
    interface IsPagination {
        /**
          * The color options are: `"primary"`, `"secondary"`, `"success"`, `"warning"`, `"error"`, `"light"`, `"info"`, `"white"`, `"black"`, and `"dark"`.
         */
        "color"?: string;
        /**
          * Current page number, starting from 1
         */
        "currentPage": number | string;
        /**
          * Number of rows per page
         */
        "perPage": number | string;
        /**
          * Total number of rows in the dataset
         */
        "totalRows": number | string;
    }
    interface IsReadmore {
        /**
          * The options to config toggle text.
         */
        "toggleOptions": IToggleOptions;
    }
    interface IsRow {
        /**
          * Align columns items together on the cross axis: 'start', 'center', 'end', 'around', 'between' or 'stretch'. Has no effect on single rows of items
         */
        "alignContent"?: string | null;
        /**
          * Horizontal alignment/spacing of all columns: 'start', 'center', 'end', 'around', or 'between'
         */
        "alignH"?: string | null;
        /**
          * Vertical alignment of all columns in a row: 'start', 'center', 'end', 'baseline', or 'stretch'
         */
        "alignV"?: string | null;
        /**
          * When set, removes the margin from the row and removes the padding from the child columns
         */
        "noGutters"?: boolean;
        /**
          * Specify the HTML tag to render instead of the default tag
         */
        "tag"?: string;
    }
}
declare global {
    interface HTMLIsAlertElement extends Components.IsAlert, HTMLStencilElement {
    }
    var HTMLIsAlertElement: {
        prototype: HTMLIsAlertElement;
        new (): HTMLIsAlertElement;
    };
    interface HTMLIsBadgeElement extends Components.IsBadge, HTMLStencilElement {
    }
    var HTMLIsBadgeElement: {
        prototype: HTMLIsBadgeElement;
        new (): HTMLIsBadgeElement;
    };
    interface HTMLIsBreadcrumbElement extends Components.IsBreadcrumb, HTMLStencilElement {
    }
    var HTMLIsBreadcrumbElement: {
        prototype: HTMLIsBreadcrumbElement;
        new (): HTMLIsBreadcrumbElement;
    };
    interface HTMLIsBreadcrumbItemElement extends Components.IsBreadcrumbItem, HTMLStencilElement {
    }
    var HTMLIsBreadcrumbItemElement: {
        prototype: HTMLIsBreadcrumbItemElement;
        new (): HTMLIsBreadcrumbItemElement;
    };
    interface HTMLIsButtonElement extends Components.IsButton, HTMLStencilElement {
    }
    var HTMLIsButtonElement: {
        prototype: HTMLIsButtonElement;
        new (): HTMLIsButtonElement;
    };
    interface HTMLIsCardElement extends Components.IsCard, HTMLStencilElement {
    }
    var HTMLIsCardElement: {
        prototype: HTMLIsCardElement;
        new (): HTMLIsCardElement;
    };
    interface HTMLIsCardBodyElement extends Components.IsCardBody, HTMLStencilElement {
    }
    var HTMLIsCardBodyElement: {
        prototype: HTMLIsCardBodyElement;
        new (): HTMLIsCardBodyElement;
    };
    interface HTMLIsCardHeaderElement extends Components.IsCardHeader, HTMLStencilElement {
    }
    var HTMLIsCardHeaderElement: {
        prototype: HTMLIsCardHeaderElement;
        new (): HTMLIsCardHeaderElement;
    };
    interface HTMLIsCardImageElement extends Components.IsCardImage, HTMLStencilElement {
    }
    var HTMLIsCardImageElement: {
        prototype: HTMLIsCardImageElement;
        new (): HTMLIsCardImageElement;
    };
    interface HTMLIsCardTitleElement extends Components.IsCardTitle, HTMLStencilElement {
    }
    var HTMLIsCardTitleElement: {
        prototype: HTMLIsCardTitleElement;
        new (): HTMLIsCardTitleElement;
    };
    interface HTMLIsContainerElement extends Components.IsContainer, HTMLStencilElement {
    }
    var HTMLIsContainerElement: {
        prototype: HTMLIsContainerElement;
        new (): HTMLIsContainerElement;
    };
    interface HTMLIsDividerElement extends Components.IsDivider, HTMLStencilElement {
    }
    var HTMLIsDividerElement: {
        prototype: HTMLIsDividerElement;
        new (): HTMLIsDividerElement;
    };
    interface HTMLIsModalElement extends Components.IsModal, HTMLStencilElement {
    }
    var HTMLIsModalElement: {
        prototype: HTMLIsModalElement;
        new (): HTMLIsModalElement;
    };
    interface HTMLIsMultiselectElement extends Components.IsMultiselect, HTMLStencilElement {
    }
    var HTMLIsMultiselectElement: {
        prototype: HTMLIsMultiselectElement;
        new (): HTMLIsMultiselectElement;
    };
    interface HTMLIsPaginationElement extends Components.IsPagination, HTMLStencilElement {
    }
    var HTMLIsPaginationElement: {
        prototype: HTMLIsPaginationElement;
        new (): HTMLIsPaginationElement;
    };
    interface HTMLIsReadmoreElement extends Components.IsReadmore, HTMLStencilElement {
    }
    var HTMLIsReadmoreElement: {
        prototype: HTMLIsReadmoreElement;
        new (): HTMLIsReadmoreElement;
    };
    interface HTMLIsRowElement extends Components.IsRow, HTMLStencilElement {
    }
    var HTMLIsRowElement: {
        prototype: HTMLIsRowElement;
        new (): HTMLIsRowElement;
    };
    interface HTMLElementTagNameMap {
        "is-alert": HTMLIsAlertElement;
        "is-badge": HTMLIsBadgeElement;
        "is-breadcrumb": HTMLIsBreadcrumbElement;
        "is-breadcrumb-item": HTMLIsBreadcrumbItemElement;
        "is-button": HTMLIsButtonElement;
        "is-card": HTMLIsCardElement;
        "is-card-body": HTMLIsCardBodyElement;
        "is-card-header": HTMLIsCardHeaderElement;
        "is-card-image": HTMLIsCardImageElement;
        "is-card-title": HTMLIsCardTitleElement;
        "is-container": HTMLIsContainerElement;
        "is-divider": HTMLIsDividerElement;
        "is-modal": HTMLIsModalElement;
        "is-multiselect": HTMLIsMultiselectElement;
        "is-pagination": HTMLIsPaginationElement;
        "is-readmore": HTMLIsReadmoreElement;
        "is-row": HTMLIsRowElement;
    }
}
declare namespace LocalJSX {
    interface IsAlert {
        /**
          * If `true` alert will close automatically.
         */
        "autoClose"?: boolean;
        /**
          * Number of seconds to close alert automatically if autoClose `true`.
         */
        "closeSecs"?: number;
        /**
          * Customized close button text.
         */
        "closeText"?: string;
        /**
          * If closable or not.
         */
        "closeable"?: boolean;
        /**
          * The color options are: `"primary"`, `"secondary"`, `"success"`, `"warning"`, `"error"`, `"light"`, `"info"`, `"white"`, `"black"`, and `"dark"`.
         */
        "color"?: string;
        /**
          * Emitted when the alert is closed.
         */
        "onClosed"?: (event: CustomEvent<any>) => void;
        /**
          * If `true`, make the alert rounded.
         */
        "rounded"?: boolean;
    }
    interface IsBadge {
        /**
          * The color options are: `"primary"`, `"secondary"`, `"success"`, `"warning"`, `"error"`, `"light"`, `"info"`, `"white"`, `"black"`, and `"dark"`.
         */
        "color"?: string;
        /**
          * If `true`, make the badge rounded.
         */
        "rounded"?: boolean;
        /**
          * The text to display in the badge.
         */
        "text"?: string;
    }
    interface IsBreadcrumb {
        "align"?: 'left' | 'right' | 'center';
        /**
          * Use different separator for each item default is '/'
         */
        "separator"?: 'dot' | 'arrow' | 'slash';
        /**
          * Size of the breadcrumb, default set normal
         */
        "size"?: 'small' | 'medium' | 'large';
    }
    interface IsBreadcrumbItem {
        /**
          * Active the condition active of item, basically used by latest item in breadcrumb component
         */
        "active"?: boolean;
        /**
          * Contains a URL If prop is set, an anchor tag will be rendered
         */
        "href"?: string | undefined;
        /**
          * Where to display linked url apply when `href` props provided clue: `_blank, _self`
         */
        "target"?: string | undefined;
    }
    interface IsButton {
        /**
          * The color to use, default is `default`
         */
        "color"?: Color;
        /**
          * If `true`, then user cannot interact with the button and changed color
         */
        "disabled"?: boolean;
        /**
          * Display of the button
         */
        "display"?: 'fullwidth';
        /**
          * Contains a URL If prop is set, an anchor tag will be rendered
         */
        "href"?: string | undefined;
        /**
          * Shape of the button
         */
        "shape"?: 'round';
        /**
          * Size of the button, default set normal
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * Where to display linked url apply when `href` props provided clue: `_blank, _self`
         */
        "target"?: string | undefined;
        /**
          * Type of the button
         */
        "type"?: 'submit' | 'reset' | 'button';
    }
    interface IsCard {
        /**
          * change color background
         */
        "color"?: Color;
        /**
          * when set as `true`, than card cannot be interacted.
         */
        "disabled"?: boolean;
        /**
          * href be filled make card become hover
         */
        "href"?: string;
        /**
          * target `_blank', '_self', etc
         */
        "target"?: string;
    }
    interface IsCardBody {
    }
    interface IsCardHeader {
    }
    interface IsCardImage {
        "alt"?: string;
        /**
          * object-fit
         */
        "object"?: 'cover' | 'fill' | 'contain' | 'scale-down' | 'none';
        "ratio"?: Ratio;
        "src"?: string;
    }
    interface IsCardTitle {
    }
    interface IsContainer {
        /**
          * When set to true, makes the row 100% wide all the time
         */
        "fluid"?: boolean | string;
        /**
          * Specify the HTML tag to render instead of the default tag
         */
        "tag"?: string;
    }
    interface IsDivider {
        /**
          * The align text of divider
         */
        "alignText"?: 'right' | 'left' | 'center';
        /**
          * The decoration to change color of divider
         */
        "color"?: Color;
        /**
          * The text to shown at the divider
         */
        "text"?: string;
    }
    interface IsModal {
        /**
          * The text to display in the cancel button.
         */
        "cancelText"?: string;
        /**
          * If 'true' will show the modal header.
         */
        "modalHeader"?: boolean;
        /**
          * The title to display in the modal.
         */
        "modalTitle"?: string;
        "onCancel"?: (event: CustomEvent<any>) => void;
        "onOk"?: (event: CustomEvent<any>) => void;
        /**
          * The text to display in the save button.
         */
        "saveText"?: string;
        /**
          * If 'true' will make the modal visible.
         */
        "visible"?: boolean;
    }
    interface IsMultiselect {
        /**
          * Enable/disable closing after selecting an option
         */
        "closeOnSelect"?: boolean;
        /**
          * If `true`, the user cannot interact with the select.
         */
        "disabled"?: boolean;
        /**
          * The options list items.
         */
        "items"?: ISelectItem[];
        /**
          * The label when option is selected.
         */
        "labelSelected"?: string;
        /**
          * The label to remove or select.
         */
        "labelTo"?: ILabelTo;
        /**
          * Limit the display of selected options. The rest will be hidden within the limitText string.
         */
        "limit"?: number;
        /**
          * Function that process the message shown when selected elements pass the defined limit.
         */
        "limitText"?: Function;
        /**
          * Maximum selected items can be selected.
         */
        "max"?: number;
        /**
          * Emitted when the selected items has changed.
         */
        "onSelectedChanged"?: (event: CustomEvent<any>) => void;
        /**
          * The text to display when not selected items.
         */
        "placeholder"?: string;
        /**
          * The selected items.
         */
        "selected"?: ISelectItem[];
        /**
          * If `true`, The badges will show selected items.
         */
        "showSelectedBadge"?: boolean;
    }
    interface IsPagination {
        /**
          * The color options are: `"primary"`, `"secondary"`, `"success"`, `"warning"`, `"error"`, `"light"`, `"info"`, `"white"`, `"black"`, and `"dark"`.
         */
        "color"?: string;
        /**
          * Current page number, starting from 1
         */
        "currentPage"?: number | string;
        /**
          * Emitted when the page is changed.
         */
        "onChangePage"?: (event: CustomEvent<any>) => void;
        /**
          * Number of rows per page
         */
        "perPage"?: number | string;
        /**
          * Total number of rows in the dataset
         */
        "totalRows"?: number | string;
    }
    interface IsReadmore {
        /**
          * The options to config toggle text.
         */
        "toggleOptions"?: IToggleOptions;
    }
    interface IsRow {
        /**
          * Align columns items together on the cross axis: 'start', 'center', 'end', 'around', 'between' or 'stretch'. Has no effect on single rows of items
         */
        "alignContent"?: string | null;
        /**
          * Horizontal alignment/spacing of all columns: 'start', 'center', 'end', 'around', or 'between'
         */
        "alignH"?: string | null;
        /**
          * Vertical alignment of all columns in a row: 'start', 'center', 'end', 'baseline', or 'stretch'
         */
        "alignV"?: string | null;
        /**
          * When set, removes the margin from the row and removes the padding from the child columns
         */
        "noGutters"?: boolean;
        /**
          * Specify the HTML tag to render instead of the default tag
         */
        "tag"?: string;
    }
    interface IntrinsicElements {
        "is-alert": IsAlert;
        "is-badge": IsBadge;
        "is-breadcrumb": IsBreadcrumb;
        "is-breadcrumb-item": IsBreadcrumbItem;
        "is-button": IsButton;
        "is-card": IsCard;
        "is-card-body": IsCardBody;
        "is-card-header": IsCardHeader;
        "is-card-image": IsCardImage;
        "is-card-title": IsCardTitle;
        "is-container": IsContainer;
        "is-divider": IsDivider;
        "is-modal": IsModal;
        "is-multiselect": IsMultiselect;
        "is-pagination": IsPagination;
        "is-readmore": IsReadmore;
        "is-row": IsRow;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "is-alert": LocalJSX.IsAlert & JSXBase.HTMLAttributes<HTMLIsAlertElement>;
            "is-badge": LocalJSX.IsBadge & JSXBase.HTMLAttributes<HTMLIsBadgeElement>;
            "is-breadcrumb": LocalJSX.IsBreadcrumb & JSXBase.HTMLAttributes<HTMLIsBreadcrumbElement>;
            "is-breadcrumb-item": LocalJSX.IsBreadcrumbItem & JSXBase.HTMLAttributes<HTMLIsBreadcrumbItemElement>;
            "is-button": LocalJSX.IsButton & JSXBase.HTMLAttributes<HTMLIsButtonElement>;
            "is-card": LocalJSX.IsCard & JSXBase.HTMLAttributes<HTMLIsCardElement>;
            "is-card-body": LocalJSX.IsCardBody & JSXBase.HTMLAttributes<HTMLIsCardBodyElement>;
            "is-card-header": LocalJSX.IsCardHeader & JSXBase.HTMLAttributes<HTMLIsCardHeaderElement>;
            "is-card-image": LocalJSX.IsCardImage & JSXBase.HTMLAttributes<HTMLIsCardImageElement>;
            "is-card-title": LocalJSX.IsCardTitle & JSXBase.HTMLAttributes<HTMLIsCardTitleElement>;
            "is-container": LocalJSX.IsContainer & JSXBase.HTMLAttributes<HTMLIsContainerElement>;
            "is-divider": LocalJSX.IsDivider & JSXBase.HTMLAttributes<HTMLIsDividerElement>;
            "is-modal": LocalJSX.IsModal & JSXBase.HTMLAttributes<HTMLIsModalElement>;
            "is-multiselect": LocalJSX.IsMultiselect & JSXBase.HTMLAttributes<HTMLIsMultiselectElement>;
            "is-pagination": LocalJSX.IsPagination & JSXBase.HTMLAttributes<HTMLIsPaginationElement>;
            "is-readmore": LocalJSX.IsReadmore & JSXBase.HTMLAttributes<HTMLIsReadmoreElement>;
            "is-row": LocalJSX.IsRow & JSXBase.HTMLAttributes<HTMLIsRowElement>;
        }
    }
}
